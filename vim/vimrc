set nocompatible
filetype off

"Setting up Vundle - the vim plugin bundler
let iCanHazVundle=1
let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
if !filereadable(vundle_readme)
    echo "Installing Vundle.."
    echo ""
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
endif
set rtp+=~/.vim/bundle/vundle/
set rtp+=$GOROOT/misc/vim

call vundle#rc()

Plugin 'gmarik/vundle'
Plugin 'Valloric/YouCompleteMe'
Plugin 'pangloss/vim-javascript'
Plugin 'adimit/prolog.vim'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-session'
Plugin 'tsaleh/vim-matchit'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'c9s/bufexplorer'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'tpope/vim-rails.git'
Plugin 'vexxor/phpdoc.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/vim-powerline'
Plugin 't9md/vim-ruby-xmpfilter'
Plugin 'sjl/gundo.vim'
Plugin 'rking/ag.vim'
Plugin 'majutsushi/tagbar'
Plugin 'fatih/vim-go'
" Ultrasnip (snippets)
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
"Haskell Plugins
Plugin 'dag/vim2hs'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'eagletmt/neco-ghc'


" vim-scripts repos
"Plugin 'PIV'
"Plugin 'FuzzyFinder'
"Plugin 'HTML-AutoCloseTag'
Plugin 'VimCalc'
Plugin 'phpcomplete.vim'
Plugin 'xml.vim'
Plugin 'camelcasemotion'
Plugin 'L9'
Plugin 'preview'

if iCanHazVundle == 0
    echo "Installing Plugins, please ignore key map error messages"
    echo ""
    :BundleInstall
endif

filetype plugin indent on     " required!
"let g:Powerline_symbols = 'fancy'
"source ~/.vim/bundle/powerline/build/lib/powerline/ext/vim/source_plugin.vim
"python from powerline.ext.vim import source_plugin; source_plugin()

syntax on
set pastetoggle=<F3>
set ssop-=options
set encoding=utf-8
set history=512
set undolevels=512
set colorcolumn=80
set laststatus=2
set visualbell
set noerrorbells
set wrapscan
set noswapfile
"set nobackup
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
set autoindent
set copyindent
set showmatch
set ruler
set hlsearch
set wildmenu
set incsearch
set number
set tabstop=4
set shiftwidth=4
set softtabstop=4
set ignorecase
set smartcase
set smarttab
set lazyredraw
set expandtab
set modelines=0
set backspace=start,indent,eol
set t_Co=256
set guifont=Monaco:h13
set nolist  "hide invisible characters
"set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:.

"let mapleader=","       " leader is comma
" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" theme configs
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

" CtrlP settings
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'

" easymotion configs
"let g:EasyMotion_leader_key = '<Leader>'

" session configs
let g:session_autosave = 'no'

"Shortcuts
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-b>"
let g:UltiSnipsEditSplit="vertical"

map <Bar> :NERDTreeToggle<CR>
nmap <F8> :TagbarToggle<CR>
vmap <C-f> :fold<CR>
nmap <CR> :set rnu!<CR>
map <C-c> :nohlsearch<CR>
"map <C-S-l> :set rl<CR>
"map <C-S-k> :set norl<CR>
map <C-l> :tabn<CR>
map <C-h> :tabp<CR>
map <C-n> :tabnew<CR>
map <leader>c :Calc<CR> 

"seeing is believing key bindings
let g:xmpfilter_cmd = "seeing_is_believing"
autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby xmap <buffer> <F5> <Plug>(seeing_is_believing-run)
autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing_is_believing-run)

cmap w!! %!sudo tee > /dev/null %

" change key bindings
nnoremap ; :
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" move to beginning/end of line
nnoremap B ^
nnoremap E $
" $/^ doesn't do anything
"nnoremap $ <nop>
"nnoremap ^ <nop>
" highlight last inserted text
nnoremap gV `[v`]
nnoremap <leader>u :GundoToggle<CR>
" open ag.vim
nnoremap <leader>a :Ag

"autocmd FileType php set omnifunc=phpcomplete#CompletePHP
"autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html,xml set listchars-=tab:>.

"php configs
au BufRead,BufNewFile *.php		set indentexpr= | set smartindent
au BufRead,BufNewFile *.phps		set filetype=php
au BufNewFile,BufRead *.thor set filetype=ruby
let g:DisableAutoPHPFolding=1
let b:match_ignorecase = 1


"ruby configs
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

"improve autocomplete menu color
highlight Pmenu ctermbg=gray ctermfg=black gui=bold

"Use filetype plugins, e.g. for PHP
inoremap <C-K> <ESC> :call PhpDocSingle()<CR>
nnoremap <C-K> :call PhpDocSingle()<CR>
vnoremap <C-K> :call PhpDocRange()<CR>
let g:pdv_cfg_Author = "Amin Saeidi, <amin.w3dev@gmail.com>"
"let g:pdv_cfg_Copyright = ""
"let g:pdv_cfg_Package = ""
"let g:pdv_cfg_License = ""
"let g:pdv_cfg_Version = "0.0.1"

" YCM configs
let g:ycm_auto_trigger = 1
let g:ycm_semantic_triggers = {'haskell' : ['.']}
